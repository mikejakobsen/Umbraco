<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE root [<!ELEMENT master ANY>
<!ATTLIST master id ID #REQUIRED>
<!ELEMENT home ANY>
<!ATTLIST home id ID #REQUIRED>
<!ELEMENT textPage ANY>
<!ATTLIST textPage id ID #REQUIRED>
<!ELEMENT articlesMain ANY>
<!ATTLIST articlesMain id ID #REQUIRED>
<!ELEMENT articlesItem ANY>
<!ATTLIST articlesItem id ID #REQUIRED>
<!ELEMENT projectsMain ANY>
<!ATTLIST projectsMain id ID #REQUIRED>
<!ELEMENT projectsItem ANY>
<!ATTLIST projectsItem id ID #REQUIRED>
<!ELEMENT contactPage ANY>
<!ATTLIST contactPage id ID #REQUIRED>
<!ELEMENT comment ANY>
<!ATTLIST comment id ID #REQUIRED>
<!ELEMENT members ANY>
<!ATTLIST members id ID #REQUIRED>
<!ELEMENT messageBoard ANY>
<!ATTLIST messageBoard id ID #REQUIRED>
]>
<root id="-1">
  <home id="1088" key="a0cf8063-2b46-463f-ba41-9f4e90de1687" parentID="-1" level="1" creatorID="0" sortOrder="0" createDate="2016-09-19T14:50:10" updateDate="2016-11-11T18:08:26" nodeName="Home" urlName="home" path="-1,1088" isDoc="" nodeType="1057" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1056" nodeTypeAlias="home">
    <umbracoNaviHide>0</umbracoNaviHide>
    <siteTitle><![CDATA[Aarhus Web Dev]]></siteTitle>
    <mainContent><![CDATA[<p><span>Aarhus </span><span>Web </span><span>Developers Network.</span></p>]]></mainContent>
    <footerText><![CDATA[© Copyright 2016]]></footerText>
    <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": []
    }
  ]
}]]></grid>
    <textPage id="1113" key="05fc7236-2ceb-4a26-8ef4-a9129328fdad" parentID="1088" level="2" creatorID="0" sortOrder="0" createDate="2016-09-26T11:32:20" updateDate="2016-11-12T19:41:24" nodeName="403 Forbidden Access" urlName="403-forbidden-access" path="-1,1088,1113" isDoc="" nodeType="1059" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1058" nodeTypeAlias="textPage">
      <metaDescription><![CDATA[403 Forbidden Access.]]></metaDescription>
      <umbracoNaviHide>1</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "name": "Headline",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "headline"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "403",
                  "editor": {
                    "alias": "headline"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "db8ee20e-f2cb-0ce3-8865-cd5903ec5c89"
        },
        {
          "name": "Main Content",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "rte"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "<p>You must login to access this page.</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "8a6e3eaa-807a-5899-018a-6631cff5d8fc"
        }
      ]
    }
  ]
}]]></grid>
    </textPage>
    <articlesMain id="1146" key="4ce75404-0c7f-4152-a714-35b8df88d10d" parentID="1088" level="2" creatorID="0" sortOrder="1" createDate="2016-10-13T11:04:40" updateDate="2016-11-09T12:42:12" nodeName="Articles" urlName="articles" path="-1,1088,1146" isDoc="" nodeType="1062" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1061" nodeTypeAlias="articlesMain">
      <metaDescription><![CDATA[Articles]]></metaDescription>
      <metaKeywords><![CDATA[articles]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
      <articlesTitle><![CDATA[Articles]]></articlesTitle>
      <articlesItem id="1147" key="6f4aab22-8db8-4d56-959a-7bdaf117b553" parentID="1146" level="3" creatorID="0" sortOrder="0" createDate="2016-10-13T11:06:47" updateDate="2016-11-12T12:15:41" nodeName="Vim Anti Patterns" urlName="vim-anti-patterns" path="-1,1088,1146,1147" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <metaDescription><![CDATA[Some cool content]]></metaDescription>
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>One of the main reasons why VIM has been so popular through the years, is the amazing enhancement it levers to the users workflow, when he finally masters the editor to it's full potential.</p>
<p>For a developer, nearly every time you reach for your mouse, that's an anti-pattern. Nearly every time, you take your hands off the home row, that's an anti pattern. It might only take a couple of second, but if you continue to do so through out the day, those seconds amounts to a lot off time. Here i collected, some of the best tips to enhance your VIM workflow. Some of them might be basic, but there all worth being mentioned.</p>
<p> </p>
<p>This text is based on these two links. And is avaiable on my blog <a href="http://www.husk-det.nu" target="_blank"></a><a href="http://www.husk-det.nu">http://husk-det.nu</a></p>
<p>https://sanctum.geek.nz/arabesque/vim-anti-patterns/<br />http://www.benorenstein.com/blog/jumping-long-distances-in-vim</p>
<p> </p>
<p>I find that the two most useful are moving by paragraph and by screenfull, but this depends on how far and how precisely you have to move.</p>
<p> </p>
<p>{ — Move to start of previous paragraph or code block.<br />} — Move to end of next paragraph or code block.<br />Ctrl+F — Move forward one screenful.<br />Ctrl+B — Move backward one screenful.</p>
<p>nG - jump to line n<br />L - jump to the bottom of the screen ("low")<br />H - jump to the top of the screen ("high")<br />M - jump to the middle of the screen ("middle")<br />C-o - jump back<br />C-i - jump forward<br />zt - move this line to the top of the screen ("top")<br />zb - move this line to the bottom of the screen ("bottom")<br />zz - move this line to the middle of the screen ("ziddle?")</p>
<p>q: — Open with a command history from normal mode<br />q/ — Open with a search history from normal mode (to search forward)<br />q? — Open with a search history from normal mode (to search backward)<br />Ctrl+F — Open with a command history from command mode<br />Ctrl+w - Cycle open splits<br />Ctrl+w + = -Make splits equal size<br />gf - Go to definition</p>
<p> </p>
<p>If you happen to know precisely where you want to go, navigating by searching is the way to go, searching forward with `/` and backward with `?`.</p>
<p>’s always useful to jump back to where you were, as well, which is easily enough done with two backticks, or gi to go to the last place you inserted text. If you like, you can even go back and forth through your entire change list of positions with g; and g,</p>
<p>gi - last insert</p>
<p><strong>Navigated the change list</strong></p>
<p>g; - g,</p>
<p><strong>Commands and search</strong></p>
<p><br /><strong>y/search&lt;Enter&gt;</strong><br /><strong>y?search&lt;Enter&gt;</strong><br /><strong>d/search&lt;Enter&gt;</strong><br /><strong>d?search&lt;Enter&gt;</strong><br /><strong>c/search&lt;Enter&gt;</strong><br /><strong>c?search&lt;Enter&gt;</strong><br /><br /></p>
<p><strong>Word under the cursor</strong></p>
<p><br />* find forward<br /># find backward<br /><br /></p>
<p><strong>Deleting, then inserting. </strong></p>
<p>Append i to the command mentally.</p>
<p>d2wi</p>
<p><strong>Repeating substitutions</strong></p>
<p>Just type `&amp;` to repeat the last substitution on the current line. You can repeat it on all lines by typing `g&amp;`.</p>
<p><strong>Current file name</strong></p>
<p>`%` is always the current bufer<br />To echo it `"%P`</p>
<p><strong>Start with splits</strong></p>
<p>-O — Open all buffers in vertically split windows, like :vsp<br />-o — Open all buffers in horizontally split windows, like :sp</p>
<p><strong>Format buffer</strong></p>
<p>:%!column -t</p>
<p>:%!sort -k1</p>
<p><strong>Insert filename</strong></p>
<p>Import etx</p>
<p>Ctrl+x Ctrl+f</p>
<p>Add `/` for absolute path</p>
<p><strong>Working with files</strong></p>
<p><br />* `gof`: **Go** to the current file's directory in **Finder** <br /> * `goF` (uppercase `F`) opens the current *working directory* (`:pwd`)<br />* `got`: **Go** to the current file's directory in a **Tmux Split**<br /> * `goT` (uppercase `T`) opens the current *working directory* (`:pwd`)</p>
<p><strong>Read More</strong></p>
<p>Wanna read more?</p>
<p>http://vimuniversity.com/samples/jumping-long-distances</p>]]></articleContent>
        <articleTitle><![CDATA[Vim anti-patterns]]></articleTitle>
      </articlesItem>
      <articlesItem id="1148" key="187cfb56-988e-4de7-babd-77a45204e65f" parentID="1146" level="3" creatorID="0" sortOrder="1" createDate="2016-10-13T11:08:07" updateDate="2016-10-13T15:29:41" nodeName="Sharding" urlName="sharding" path="-1,1088,1146,1148" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <metaDescription><![CDATA[Lorem]]></metaDescription>
        <metaKeywords><![CDATA[sharding]]></metaKeywords>
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p><span>hmm.</span></p>]]></articleContent>
        <articleTitle><![CDATA[Sharding]]></articleTitle>
      </articlesItem>
      <articlesItem id="1149" key="3ef8a2b3-f8d1-46fa-8e8a-d0acfac0ada4" parentID="1146" level="3" creatorID="0" sortOrder="2" createDate="2016-10-13T11:09:51" updateDate="2016-11-12T12:08:32" nodeName="Vim Password Manager" urlName="vim-password-manager" path="-1,1088,1146,1149" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<h4>Vim as Password manager</h4>
<p>In my pursuit of a secure computer, i'm hugh fan of 1Password for Mac. Before i began using 1Password, i had the same 8 digit password on every site.</p>
<p>But why not use VIM? The main problem and advantage with 1Password, is that the passwords are stored in a plain file on your own computer.</p>
<p><br />Remember, Vim has an option that enables the encryption of plain text files. But its default encryption mode pkzip is not that secure and can be easily bruteforced. So the first thing you need to do is to set the crypto algorithm to something more secure. Add this to your .vimrc :</p>
<p><em>set cm=blowfish</em></p>
<p>So, now create a text file, say .password and open it with Vim. Store your usernames, passwords, sites as tuples in the text file. To set a password type :X , Vim will prompt you for a passphrase, once you enter one and save the file. An encrypted version of the text file will be stored on disk. Every subsequent time you open the file, it will ask you for the pass phrase and then decrypt the file, but it will always save the encrypted version. If you need to change the passphrase, type :X</p>
<p>Then store it on Dropbox, or a host of your choice.</p>]]></articleContent>
        <articleTitle><![CDATA[Vim as Password manager]]></articleTitle>
      </articlesItem>
      <articlesItem id="1171" key="251a311e-e467-4aa9-9c7c-9de158cef97d" parentID="1146" level="3" creatorID="1" sortOrder="3" createDate="2016-11-11T16:54:44" updateDate="2016-11-11T17:43:56" nodeName="Vim Netrw" urlName="vim-netrw" path="-1,1088,1146,1171" isDoc="" nodeType="1065" creatorName="Jane Wilfred" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>One of the first plugins every VIM user install is NerdTree to get the IDE feeling.</p>
<p>But VIM has a very solid file explorer already build in.</p>
<p>I'm currently trying to minimize the amount of plugins i'm using, and make my vim seems less bloated.</p>
<table border="0">
<tbody>
<tr>
<th>lazy</th>
<th>mnemonic</th>
<th>open file explorer</th>
</tr>
<tr>
<td>:e</td>
<td>:edit</td>
<td>at current working directory</td>
</tr>
<tr>
<td>:sp.</td>
<td>:split .</td>
<td>in splitat current working directory</td>
</tr>
<tr>
<td>:vs.</td>
<td>:vsplit .</td>
<td>in vertical split at current working directory</td>
</tr>
<tr>
<td>:E</td>
<td>:Explore</td>
<td>at directory of current file</td>
</tr>
<tr>
<td>:Se</td>
<td>:Sexplore</td>
<td>in split at directory of current file</td>
</tr>
<tr>
<td>:Vex</td>
<td>:Vexplore</td>
<td>in split at directory of current file</td>
</tr>
</tbody>
</table>
<h4>Commands</h4>
<table border="0">
<tbody>
<tr>
<th>Command</th>
<th>Action</th>
</tr>
<tr>
<td>%</td>
<td>Create a new file</td>
</tr>
<tr>
<td>d</td>
<td>Create a new directory</td>
</tr>
<tr>
<td>R</td>
<td>Rename the file/directory</td>
</tr>
<tr>
<td>D</td>
<td>Delete the file/directore</td>
</tr>
</tbody>
</table>
<h4>My settings</h4>
<p>Save it in your vimrc</p>
<p><br /> let g:netrw_altv = 1<br /> let g:netrw_banner = 0<br /> let g:netrw_browse_split = 4<br /> let g:netrw_liststyle = 3<br /> let g:netrw_winsize = -28<br /> nnoremap &lt;silent&gt; &lt;leader&gt;ne :Lexplore&lt;cr&gt;<br /> nnoremap &lt;silent&gt; &lt;leader&gt;ns :Sexplore&lt;cr&gt;</p>
<p>From my blog: http://husk-det.nu/Vim/Netrw.html</p>]]></articleContent>
        <image><![CDATA[1172]]></image>
        <articleTitle><![CDATA[Vim Netrw]]></articleTitle>
      </articlesItem>
      <articlesItem id="1190" key="2856b9f0-10dc-4b4d-9246-038832f734ea" parentID="1146" level="3" creatorID="0" sortOrder="4" createDate="2016-11-12T12:33:49" updateDate="2016-11-12T12:33:49" nodeName="Vim Insert mode" urlName="vim-insert-mode" path="-1,1088,1146,1190" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>Vim has three modes. Normal mode, where you navigated the file. Command mode - where you issue commands. And most importantly Insert mode.</p>
<p>Here are some of the best shortcuts in insert mode.</p>
<p>Learning these really did wonders to my productivity.</p>
<p>&lt;table&gt;<br /> &lt;tr&gt;<br /> &lt;th&gt;Key&lt;/th&gt;<br /> &lt;th&gt;Description&lt;/th&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-r...&lt;/td&gt;<br /> &lt;td&gt;inserts the content of a register&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;C-u&lt;/td&gt;<br /> &lt;td&gt;erases the line&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;C-d&lt;/td&gt;<br /> &lt;td&gt;de-indents&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-t&lt;/td&gt;<br /> &lt;td&gt;indents&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-a&lt;/td&gt;<br /> &lt;td&gt;repeats the last insertion&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-y&lt;/td&gt;<br /> &lt;td&gt;insert the character above&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-e&lt;/td&gt;<br /> &lt;td&gt;inserts the character below&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;c-w&lt;/td&gt;<br /> &lt;td&gt;erases the last word&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;C-x&lt;/td&gt;<br /> &lt;td&gt;initiates completion&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;C-o&lt;/td&gt;<br /> &lt;td&gt;return to insert after a single normal command&lt;/td&gt;<br /> &lt;/tr&gt;<br /> &lt;tr&gt;<br /> &lt;td&gt;C-v&lt;/td&gt;<br /> &lt;td&gt;Insert literal characters. I use this a lot.&lt;/td&gt;<br /> &lt;/tr&gt;<br />&lt;/table&gt;</p>
<p> </p>
<p>http://husk-det.nu/Vim/insert-mode.html</p>]]></articleContent>
        <image><![CDATA[1189]]></image>
        <articleTitle><![CDATA[Vim Insert mode]]></articleTitle>
      </articlesItem>
      <articlesItem id="1191" key="2b4f1cfc-bfd7-40b3-ba6e-4a98c7ca9e6a" parentID="1146" level="3" creatorID="0" sortOrder="5" createDate="2016-11-12T12:37:10" updateDate="2016-11-12T12:45:10" nodeName="Vim and Git" urlName="vim-and-git" path="-1,1088,1146,1191" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>A great thing about VIM is how native interacting with Git feels.</p>
<p>Especially if you add Tim Pope's great Git Fugitive plugin to that workflow.</p>
<p>Running a Git Status, or a Git Diff straight from within VIM is a great way to manage all the changes you've made, and to determine which changes you wanna commit, and which you wanna stash away.</p>
<p>For instance the :Gstatus command opens a status window. The contents closely resemble the output from running git status in the shell, but fugitive makes the window interactive. You can jump directly between files with ctrl-n and ctrl-p.</p>
<p> </p>
<table border="0">
<tbody>
<tr>
<th>Command</th>
<th>Effect</th>
</tr>
<tr>
<td>-</td>
<td>Add/reset file</td>
</tr>
<tr>
<td>Enter</td>
<td>Open current file</td>
</tr>
<tr>
<td>p</td>
<td>run `git add –patch` for current file</td>
</tr>
<tr>
<td>c</td>
<td>invoke :Gcommit</td>
</tr>
</tbody>
</table>
<p><img style="width: 500px; height: 357.58196721311475px;" src="/media/1029/sxlkft7.png?width=500&amp;height=357.58196721311475" alt="Git diff" rel="1192" data-id="1192" /></p>
<p>A great video about Fugitive: http://media.vimcasts.org/videos/32/fugitive_2.m4v</p>]]></articleContent>
        <image><![CDATA[1193]]></image>
        <articleTitle><![CDATA[Vim and Git]]></articleTitle>
      </articlesItem>
      <articlesItem id="1195" key="4d3bb8e8-0bc5-4d3b-9144-d6bff9afa4c7" parentID="1146" level="3" creatorID="0" sortOrder="6" createDate="2016-11-12T12:49:21" updateDate="2016-11-12T12:49:21" nodeName="Vim Cheatsheet" urlName="vim-cheatsheet" path="-1,1088,1146,1195" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>Just a list of the hard-to-remember but easy-to-love commands and shortcuts that I<br />find.</p>
<p>Plenty more useful Vim commands/tips <a href="http://zzapper.co.uk/vimtips.html" target="_blank">here</a>.</p>
<p> </p>
<table border="0">
<tbody>
<tr>
<th><span style="font-weight: normal;">Command</span></th>
<th><span style="font-weight: normal;">What is happening?</span></th>
</tr>
<tr>
<td>^w then ^w</td>
<td>Cycle through open splits</td>
</tr>
<tr>
<td>cc</td>
<td>Delete line and enter insert mode</td>
</tr>
<tr>
<td>cw</td>
<td>Change word</td>
</tr>
<tr>
<td>^w then =</td>
<td>Make all splits equal in size</td>
</tr>
<tr>
<td>gg=G</td>
<td>Reindent the file</td>
</tr>
<tr>
<td>"+y</td>
<td>Copy to the system clipboard</td>
</tr>
<tr>
<td>:%s/find/replace</td>
<td>Global find and replace</td>
</tr>
<tr>
<td>gd</td>
<td>Go to definition of the object under the cursor</td>
</tr>
<tr>
<td>:e</td>
<td>Refresh the current buffer/file</td>
</tr>
<tr>
<td>:e!</td>
<td>Same as above, but discards changes</td>
</tr>
<tr>
<td>ci"</td>
<td>Change content wrapped in quotes "</td>
</tr>
<tr>
<td>cit</td>
<td>Change text inside &lt;tags&gt;</td>
</tr>
<tr>
<td>cst</td>
<td>Change surrounding &lt;tag&gt;</td>
</tr>
<tr>
<td>p</td>
<td>Insert clipboard below current line</td>
</tr>
<tr>
<td>P</td>
<td>Insert clipboard above current line</td>
</tr>
<tr>
<td>gf</td>
<td>Open the file under the current cursor</td>
</tr>
<tr>
<td>*</td>
<td>Search for the current cursor in the buffer</td>
</tr>
<tr>
<td>ct_</td>
<td>Change until the next `_`</td>
</tr>
<tr>
<td>c/foo&lt;CR&gt;</td>
<td>Change until the search term "foo"</td>
</tr>
<tr>
<td>^E</td>
<td>Scroll window down</td>
</tr>
<tr>
<td>^Y</td>
<td>Scroll window up</td>
</tr>
<tr>
<td>^F</td>
<td>Page down</td>
</tr>
<tr>
<td>^B</td>
<td>Page up</td>
</tr>
</tbody>
</table>
<p> </p>
<p>http://husk-det.nu/Vim/cheatsheet.html</p>
<p>http://zzapper.co.uk/vimtips.html</p>]]></articleContent>
        <image><![CDATA[1194]]></image>
        <articleTitle><![CDATA[Vim Cheatsheet]]></articleTitle>
      </articlesItem>
      <articlesItem id="1199" key="3dbb3f03-2225-4760-a612-ef462d568cd0" parentID="1146" level="3" creatorID="0" sortOrder="7" createDate="2016-11-12T17:21:07" updateDate="2016-11-12T17:29:07" nodeName="Commandline vs. Finder" urlName="commandline-vs-finder" path="-1,1088,1146,1199" isDoc="" nodeType="1065" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1064" nodeTypeAlias="articlesItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <articleContent><![CDATA[<p>First off, i'm a big fan of the command-line. But some people just doesn't get it. </p>
<p>If i could, i would search for everything. Every time i open an application i type the name in Spotlight/Alfred and simply press enter.</p>
<p>We're other people like the graphical interface, i love the simplicity, and the speed of just typing it.</p>
<p> </p>
<p>I really endorse other to spend more time on the command-line. The more time, you spend using it, the more you love it.</p>
<p>I find an awesome tool, to give the command-line the touch and feel of finder. And get both the graphical overview, that finder provides and the speed and feel of the command-line.</p>
<p> <a href="https://github.com/b4b4r07/cli-finder">Cli-finder</a> is simply a binary script, and a zsh file to use the functions with the ZSH shell.</p>
<p> Just finder finder in the shell will initiate the script. And make the user able to scroll through the files, or open them as working directory, ore open it with the default editor.</p>
<p> </p>
<p><img style="width: 480px; height: 309px;" src="/media/1032/gif.gif?width=480&amp;height=309" alt="" rel="1198" data-id="1198" /></p>
<table border="0">
<tbody>
<tr>
<th>Keys</th>
<th>Actions</th>
</tr>
<tr>
<td>Enter</td>
<td>Outputs the path undert the cursor to your terminal</td>
</tr>
<tr>
<td>Ctrl-R</td>
<td>Toggle cli-finder mode (default to $CLI_FINDER_MODE)</td>
</tr>
<tr>
<td>Ctrl-L</td>
<td>Quick view with $PAGER (using pygmentize if available)</td>
</tr>
<tr>
<td>Ctrl-V</td>
<td>Edit with $EDITOR</td>
</tr>
</tbody>
</table>
<p><strong>Install</strong></p>
<p> Put the Binary file, in your Bin folder, and source the zsh script in you .zshrc</p>
<p> </p>
<p>The script depends on FZF. So you need to install it first.</p>
<p>More info:</p>
<p>https://github.com/b4b4r07/cli-finder</p>]]></articleContent>
        <image><![CDATA[1198]]></image>
        <articleTitle><![CDATA[Commandline vs. Finder]]></articleTitle>
      </articlesItem>
    </articlesMain>
    <projectsMain id="1136" key="1a121e6c-f2a3-41a9-9db9-9366ec7c2aca" parentID="1088" level="2" creatorID="0" sortOrder="2" createDate="2016-10-13T11:00:11" updateDate="2016-11-09T12:42:12" nodeName="Projects" urlName="projects" path="-1,1088,1136" isDoc="" nodeType="1071" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1070" nodeTypeAlias="projectsMain">
      <metaDescription><![CDATA[Projects.]]></metaDescription>
      <metaKeywords><![CDATA[projects]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
      <projectsBodyText><![CDATA[<h4>Projects</h4>]]></projectsBodyText>
      <projectsTitle><![CDATA[Projects]]></projectsTitle>
      <projectsItem id="1150" key="b67ec068-916a-4bde-9b7e-48678424ac93" parentID="1136" level="3" creatorID="0" sortOrder="0" createDate="2016-10-13T11:11:45" updateDate="2016-11-11T16:32:27" nodeName="Vim and FZF" urlName="vim-and-fzf" path="-1,1088,1136,1150" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>One of the main reasons, why i use VIM on a daily basis. Is the connectivity with the command-line.</p>
<p>Many Vim users, use a GUI version of Vim like MacVim or NeoVim. Mainly because the interface has all the similarities<br />you'll normally get from a Text editor like Sublime Text ore Visual Studio Code.</p>
<p>And off cause the ability to save, just by using Ctrl+S instead of :w all the time.</p>
<p>But the main reason why i use Vim from the command-line, is the ability to use FZF.</p>
<p>FZF is a file explorer based on ACK/Grep depending on your setup.</p>
<p><br />Type "fe" to get a fuzzy finder searcher directly from the command-line.</p>
<p><br /># fe [FUZZY PATTERN] - Open the selected file with the default editor<br /># - Bypass fuzzy finder if there's only one match (--select-1)<br /># - Exit if there's no match (--exit-0)</p>
<p style="padding-left: 90px;"><br />fe() {<br /> local files<br /> IFS=$'\n' files=($(fzf-tmux --query="$1" --multi --select-1 --exit-0))<br /> [[ -n "$files" ]] &amp;&amp; ${EDITOR:-vim} "${files[@]}"<br />}</p>
<p>And fshow will let you search though all the git commit in the branch.</p>
<p>In the image below, you'll see my dotfiles. With nearly 200 commits, the git history becomes difficult to manage.<br />That's where the 'fshow' command really shines.</p>
<p> </p>
<p># fshow - git commit browser</p>
<p style="padding-left: 90px;"><br />fshow() {<br /> git log --graph --color=always \<br /> --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |<br /> fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \<br /> --bind "ctrl-m:execute:<br /> (grep -o '[a-f0-9]\{7\}' | head -1 |<br /> xargs -I % sh -c 'git show --color=always % | less -R') &lt;&lt; 'FZF-EOF'<br /> {}<br /> FZF-EOF"<br />}</p>
<p><br />FZF <a href="https://github.com/junegunn/fzf" target="_blank" title="FZF on Github">https://github.com/junegunn/fzf</a></p>]]></projectContent>
        <projectTitle><![CDATA[Vim and FZF]]></projectTitle>
        <image><![CDATA[1169]]></image>
      </projectsItem>
      <projectsItem id="1152" key="51c0c553-5713-4665-afa0-9e6790f8e053" parentID="1136" level="3" creatorID="0" sortOrder="2" createDate="2016-10-13T11:15:53" updateDate="2016-11-11T16:48:15" nodeName="Lorem Ipsum" urlName="lorem-ipsum" path="-1,1088,1136,1152" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Jane Wilfred" writerID="1" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>Lorem Ipsum<span> er ganske enkelt fyldtekst fra print- og typografiindustrien. Lorem Ipsum har været standard fyldtekst siden 1500-tallet, hvor en ukendt trykker sammensatte en tilfældig spalte for at trykke en bog til sammenligning af forskellige skrifttyper. Lorem Ipsum har ikke alene overlevet fem århundreder, men har også vundet indpas i elektronisk typografi uden væsentlige ændringer. Sætningen blev gjordt kendt i 1960'erne med lanceringen af Letraset-ark, som indeholdt afsnit med Lorem Ipsum, og senere med layoutprogrammer som Aldus PageMaker, som også indeholdt en udgave af Lorem Ipsum.</span></p>]]></projectContent>
        <projectTitle><![CDATA[Lorem Ipsum]]></projectTitle>
      </projectsItem>
      <projectsItem id="1166" key="86460244-d324-438f-8235-cfe8446a7b77" parentID="1136" level="3" creatorID="0" sortOrder="4" createDate="2016-11-11T15:03:09" updateDate="2016-11-11T16:47:29" nodeName="ChromeCast Tips" urlName="chromecast-tips" path="-1,1088,1136,1166" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Jane Wilfred" writerID="1" template="1074" nodeTypeAlias="projectsItem">
        <metaDescription><![CDATA[Chromecast]]></metaDescription>
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>Are you one of the lucky people, who owns a Google Chromecast? Then you really need to read this tip.</p>
<p>Out of the box, the chromecast software dosen't support streaming local video files. There's some experimental support for it within the VLC player, but until VLC becomes stable. This tip is awesome.</p>
<p><strong>Install Castnow.</strong></p>
<p>Castnow is a NPM package, which support all kinds of chromecast playbacks, all controlled straight from your computers terminal/command-line.</p>
<p>npm install castnow -g</p>
<p> </p>
<p><strong>Usage</strong></p>
<p> </p>
<p>start playback of a local video file</p>
<p><br />$ castnow ./myvideo.mp4</p>
<p>start playback of video and mp3 files in the local directory<br />$ castnow ./mydirectory/</p>
<p>playback 3 videos after each other<br />$ castnow video1.mp4 video2.mp4 video3.mp4</p>
<p>start playback of an mp4 file over the web<br />$ castnow http://commondatastorage.googleapis.com/gtv-videos-bucket/ED_1280.mp4</p>
<p>start playback of a video over torrent<br />$ castnow &lt;url-to-torrent-file OR magnet&gt;</p>
<p>start playback of a video over torrent with local subtitles<br />$ castnow &lt;url-to-torrent-file OR magnet&gt; --subtitles &lt;/local/path/to/subtitles.srt&gt;</p>
<p>transcode some other video format to mp4 while playback (requires ffmpeg)<br />$ castnow ./myvideo.avi --tomp4</p>
<p>re-attach to a currently running playback session<br />$ castnow</p>]]></projectContent>
        <projectTitle><![CDATA[ChromeCast Tips]]></projectTitle>
        <image><![CDATA[1170]]></image>
      </projectsItem>
      <projectsItem id="1168" key="6e27723e-d5a7-4609-a4c1-89ce5b812892" parentID="1136" level="3" creatorID="0" sortOrder="5" createDate="2016-11-11T15:31:23" updateDate="2016-11-12T10:55:21" nodeName="Spotify" urlName="spotify" path="-1,1088,1136,1168" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>Shpotify is a quite simple bash script that allow you to control Spotify from the command line.</p>
<p>Personally, i nearly always have a Tmux tab open, to control Spotify with.</p>
<p>And yes, it's called Shpofiy. At least the script is.</p>
<p><strong>Install</strong></p>
<p>First off, you can either download the binary straight from <a href="https://github.com/hnarayanan/shpotify" target="_blank" title="Spotify">Github</a>, and save it to your bin directory.</p>
<p>Or you can copy the file Shpotify to a convenient location in your PATH, or set your PATH to include the folder where the file is located.</p>
<p>Or you can add it to your own dotfiles, and make the bash script, always follow you around. </p>
<p>Simply download the bash script, and save it in your Bin directory, just like i did here.</p>
<p> </p>
<p><em>https://github.com/mikejakobsen/dotfiles/blob/master/bin/spotify</em></p>
<p> </p>
<p>To make the script even more powerfull, you can customize it by making your own aliases.</p>
<p>For instance simply typing pause - next ore spil followed by an artist, will start the playback.</p>
<p>alias p="spotify play"<br />alias pause="spotify pause"<br />alias next="spotify next"<br />alias prev="spotify prev"<br />alias song="spotify status"<br />alias repeat="spotify toggle repeat"</p>
<p>alias spil="spotify play artist"<br />alias playlist="spotify play list"</p>]]></projectContent>
        <projectTitle><![CDATA[Spotify Tip]]></projectTitle>
        <image><![CDATA[1167]]></image>
      </projectsItem>
      <projectsItem id="1175" key="59e1710f-dcef-4980-a8a1-5fee43f66a0e" parentID="1136" level="3" creatorID="0" sortOrder="6" createDate="2016-11-12T10:37:11" updateDate="2016-11-12T10:37:11" nodeName="Webfonts" urlName="webfonts" path="-1,1088,1136,1175" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>Up until recently, my dotfiles was a mixture of 80mb of fonts, so every time i ran a git pull on my dotfiles, to sync it with my local machine.</p>
<p>Most of the load time was caused by 80mb of fonts, which becomes pretty annoying at some point. </p>
<p>Compared with the fact that Google has a solid collection of Web Fonts for all kind of needs.</p>
<p> </p>
<p>I replaced the Fonts folder with this amazing repo containing a couple of bash scripts, to download the fonts from googles own font <a href="https://github.com/google/fonts/">repo </a>and  move them to OSX native font folder</p>
<p> </p>
<p> <em>mv fonts/* /Library/Fonts/ </em></p>
<p> </p>
<p><strong>Install</strong></p>
<p>To sum it up..</p>
<p>Just run this curl command from your terminal, and wait.</p>
<p> </p>
<p>curl https://raw.githubusercontent.com/qrpike/Web-Font-Load/master/install.sh | sh</p>
<p> </p>
<p>A quick tip disable <em>"Font Preview"</em> in Photoshop. </p>
<p><strong>Notes:</strong></p>
<p>You can see a complete list of all the fonts <a href="https://github.com/qrpike/Web-Font-Load/blob/master/list-of-fonts.txt">here</a>.</p>
<p>A Zip file with all the <a href="https://github.com/google/fonts/archive/master.zip">fonts</a>. (250mb)</p>]]></projectContent>
        <projectTitle><![CDATA[Web Fonts]]></projectTitle>
        <image><![CDATA[1174]]></image>
      </projectsItem>
      <projectsItem id="1177" key="ae5462fb-cf35-49d5-94e5-1e8f3e67cf5e" parentID="1136" level="3" creatorID="0" sortOrder="7" createDate="2016-11-12T10:47:12" updateDate="2016-11-12T10:47:12" nodeName="Terminal windows manager" urlName="terminal-windows-manager" path="-1,1088,1136,1177" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>One of my favorite tips for OSX is to install Termtile. Termfile is a simple collection of 9 apple scripts, which enable you to control, the size of your terminal, just by typing a few keystrokes.</p>
<p>LL - for example resizes your terminal to fill the left side of the screen.</p>
<p>Along with the 9 Apple Scripts files, termtile pretty much only consist of a Bash script to make the install simple, and a readme containing all the aliases to initiate it.</p>
<p> </p>
<p><strong>Install</strong></p>
<p>The installation is pretty simple. You just clone the Git Repo, and run the install bash script.</p>
<p>git clone https://github.com/apaszke/termtile<br />cd termtile; ./install.sh</p>
<p>One of the greatest things about termtile, is as they explain it them self:</p>
<p><em>"Termtile is a set of scripts, which set you free from your mouse and touchpad. Don't distract yourself and manage all your terminal windows with a handful of commands."</em></p>
<p>And the fact that you can easily customize the aliases, or make your own.</p>
<p>I often use my own alias</p>
<p><em>alias edit='cen &amp;&amp; vim'</em></p>
<p>Which center the window, and opens Vim.</p>]]></projectContent>
        <projectTitle><![CDATA[Terminal windows manager]]></projectTitle>
        <image><![CDATA[1176]]></image>
      </projectsItem>
      <projectsItem id="1179" key="0f846c28-1baf-4d70-807f-e30be0a81a3d" parentID="1136" level="3" creatorID="0" sortOrder="8" createDate="2016-11-12T11:03:21" updateDate="2016-11-12T11:03:21" nodeName="Who's calling you?" urlName="whos-calling-you" path="-1,1088,1136,1179" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>Are you as annoyed with salespersons calling you all the time?</p>
<p>You can't simply block them, but at least you can know which numbers to avoid.</p>
<p> </p>
<p>I while ago a friend of mine made a pretty simple script to <em>scrap </em>the Krak page. And simply return a Json object with the return address of the caller.</p>
<p>To make it easy for my self, i made a simple bash script to use it straight from the command line.</p>
<p>It simply takes the term of the file. Krak in this case, and a $term the user inputs and returns a JSON object with the data.</p>
<p> </p>
<p>So if you wanna know you just called you, you simply type. </p>
<div><em>Krak 88888888</em></div>
<p> </p>
<p>#!/bin/bash<br /># Slå et nummer op på krak.<br /># Init krak + nr<br />term=`echo $* | sed -e "s/ /+/"`<br />curl --silent "http://numnumnum.herokuapp.com/$term" | python -m json.tool</p>
<p> </p>
<p>If you save the script to your bin directory. Your able to run it all through out your system.</p>
<p>https://github.com/mikejakobsen/dotfiles/blob/master/bin/krak</p>
<p> </p>
<p>The Script:</p>
<p><a href="https://gist.githubusercontent.com/mikker/26ad0a071e9482021f17/raw/5d1e7f451635ba1599b4211d8a242fd0bd2f8813/config.ru" target="_blank">https://gist.githubusercontent.com/mikker/26ad0a071e9482021f17/raw/5d1e7f451635ba1599b4211d8a242fd0bd2f8813/config.ru</a></p>]]></projectContent>
        <projectTitle><![CDATA[Who's calling you?]]></projectTitle>
        <image><![CDATA[1178]]></image>
      </projectsItem>
      <projectsItem id="1181" key="e31c0d06-b3f6-4a24-b072-d7954731e607" parentID="1136" level="3" creatorID="0" sortOrder="9" createDate="2016-11-12T11:07:18" updateDate="2016-11-12T11:11:05" nodeName="Remove spam from Facebook" urlName="remove-spam-from-facebook" path="-1,1088,1136,1181" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>If you are kinda like me. You probably hate, all the noise on Facebook.</p>
<p>I made a custom stylesheet to remove, all the unnecessary spam on there.</p>
<p>My timeline, pretty much consisted of posts my friends liked, that didn't really interest me.</p>
<p>Or videos of Cats, which i love, but it really slows me down.</p>
<p> </p>
<address>I traversed the dom, and found all the annoying elements, and simply made a stylesheet, to remove (Display: none;) all the annoying elements.</address><address></address>
<p>* Notice: Safari loads a custom stylesheet as a formatark as the image shows.</p>
<p> </p>
<p>Link to the stylesheet:</p>
<p><a href="https://gist.githubusercontent.com/mikejakobsen/f16ed71edfe94d44c7283e13dbec99a8/raw/a4b3e89a0150b0173785972fe9b71fca564a5c55/Quiet%20Facebook" target="_blank" title="Gist Stylesheet">https://gist.githubusercontent.com/mikejakobsen/f16ed71edfe94d44c7283e13dbec99a8/raw/a4b3e89a0150b0173785972fe9b71fca564a5c55/Quiet%20Facebook</a></p>]]></projectContent>
        <projectTitle><![CDATA[Remove spam from Facebook]]></projectTitle>
        <image><![CDATA[1180]]></image>
      </projectsItem>
      <projectsItem id="1183" key="ed328b0a-12b9-4edb-a5fb-63765a8fe0a5" parentID="1136" level="3" creatorID="0" sortOrder="10" createDate="2016-11-12T11:23:54" updateDate="2016-11-12T11:23:54" nodeName="A password for each site" urlName="a-password-for-each-site" path="-1,1088,1136,1183" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>I recently kinda switched from 1Password to Dashlane, for all my passwords.</p>
<p>I have 160 logins saved, and 64 of them seems to be the same password.</p>
<p>So if someone managed to get a hold of that pretty simple 10 digit password, i would be in a world of trouble.</p>
<p>Right now, i'm in the process of changing as many of the passwords as possible, to make the outcome, of that case more tolerable.</p>
<p> </p>
<p>So i made a pretty simple script, to generate a random 32 digit password, and simply copy it to my clipboard with a pbcopy command.</p>
<p>If i type password, which is the name of the file, saved in my Bin folder. I generates a password and i'm ready to paste it whereever. </p>
<p>Then i simply count on Dashlane to remember it for me.</p>
<p> </p>
<p>#!/usr/bin/env ruby</p>
<p># En random 32 digit kode.<br /># Jeg bruger 1Password/Dashlane/Vim, og en random kode til hver tjeneste</p>
<p>chararacter_count = ARGV.shift || 32</p>
<p>chars = ((0..9).to_a + ('a'..'z').to_a + ('A'..'Z').to_a).join<br />password = Array.new(chararacter_count.to_i).inject([]) do |password, i|<br /> password &lt;&lt; chars[rand(chars.length-1)] <br />end.join</p>
<p>%x{printf "#{password}" | pbcopy}</p>
<p> </p>
<p>Source:</p>
<p>https://github.com/mikejakobsen/dotfiles/blob/master/bin/password</p>]]></projectContent>
        <projectTitle><![CDATA[A password for each site]]></projectTitle>
        <image><![CDATA[1182]]></image>
      </projectsItem>
      <projectsItem id="1185" key="5e489dbb-1aa3-4676-b6b5-65451e667a55" parentID="1136" level="3" creatorID="0" sortOrder="11" createDate="2016-11-12T11:34:01" updateDate="2016-11-12T12:53:18" nodeName="P6 and Spotify" urlName="p6-and-spotify" path="-1,1088,1136,1185" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Completed]]></status>
        <projectContent><![CDATA[<p>I'm a regular listener to P6. Pretty much because i hate commercials, and the ability to always change which track i'm listening to, becomes a bit time consuming for me.</p>
<p> </p>
<p>I really hate the webplayer, it's buggy, and the streaming becomes corrupted all the time.</p>
<p>So i found the absolute url of the stream, and made a simple bash script. To start playback from it.</p>
<p>Not much rocket science here. But i use the command a lot.</p>
<p>#!/bin/sh<br />open -a VLC 'http://drradio3-lh.akamaihd.net/i/p6beat_9@143533/master.m3u8'</p>
<p>From time to time i became annoyed, if a song was playing and i didn't know the artist, ore i wanted to listen to it again.</p>
<p> </p>
<p>So i found a simple script to make me able to do so.</p>
<p>It simply scraps the site on DR, that shows the current song playing, and then it search Spotify for the artist, and opens the url.</p>
<p> </p>
<p>#!/usr/bin/env ruby<br />require 'nokogiri'<br />require 'open-uri'</p>
<p>h = Nokogiri::HTML(open('http://www.dr.dk/radio/live/p6beat/'))<br />puts h.css('.trackInfo').first.text.strip.split("\r\n").map(&amp;:strip).select { |s| s.length &gt; 0 }.reverse.join(' - ')</p>
<p> </p>
<p><strong>Spotify</strong></p>
<p>search_url = "spotify:search:#{URI.escape track}"<br />system "open '#{search_url}'"</p>
<p> </p>
<p> </p>
<p>https://github.com/mikejakobsen/dotfiles/blob/master/bin/p6</p>
<p>https://github.com/mikejakobsen/dotfiles/blob/master/bin/whodis-p6</p>
<p>https://github.com/mikejakobsen/dotfiles/blob/master/bin/p6-to-spotify</p>
<p> </p>
<p>To see some more <em>Radio Scripts. </em>I just added a bunch to my dotfiles.</p>
<p>https://github.com/mikejakobsen/dotfiles/commit/9b1329df615a1a595f6bb983fcb63c70107eb8c6</p>]]></projectContent>
        <projectTitle><![CDATA[P6 and Spotify]]></projectTitle>
        <image><![CDATA[1184]]></image>
      </projectsItem>
      <projectsItem id="1188" key="9acda7f1-82f7-4426-bf01-0df3b3d7ad22" parentID="1136" level="3" creatorID="0" sortOrder="12" createDate="2016-11-12T12:08:15" updateDate="2016-11-12T12:08:15" nodeName="AdBlock" urlName="adblock" path="-1,1088,1136,1188" isDoc="" nodeType="1075" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1074" nodeTypeAlias="projectsItem">
        <umbracoNaviHide>0</umbracoNaviHide>
        <status><![CDATA[Underdevelopment]]></status>
        <projectContent><![CDATA[<p>I recently borrowed a computer from a friend, for just 10 minutes. He apparently didn't use any kind of AdBlocker.</p>
<p>The Internet was a hole new experience for me, all blowded and filled with distracting stuff.</p>
<p> </p>
<p>According to <a href="https://www.quora.com/What-is-the-percentage-of-Internet-users-that-employ-AdBlock-Plus-or-similar-ad-blocking-plugins" target="_blank">Quora</a>. Nearly 10% of the users are using some kind of AdBlocker. I really understand why.</p>
<p>On my quest for the best AdBlock i found a kinda old school approach. Your own Hostfile.</p>
<p>The host file is mainly a way to redirect your browser to another domain. For instance, i use it to host all the sites i'm developing under a .dev domain in stead of some localhost sub page.</p>
<p>But your host file can also function as a great way to block out unwanted stuff.</p>
<p>I found a great list of about 30-36.000 suspicious domains, and the added them to my host file along with the stuff i want to block my self.</p>
<p><strong>Install</strong></p>
<p>To update your host file. You need sudo permission, and a editor like Vim.</p>
<p>Open your terminal and insert</p>
<p>sudo vim /etc/hosts</p>
<p><img style="width: 500px; height:300.792864222002px;" src="/media/1027/bktsqpl.png?width=500&amp;height=300.792864222002" alt="hosts" rel="1187" data-id="1187" /></p>
<p><strong>My outdated list:</strong></p>
<p>https://github.com/mikejakobsen/dotfiles/tree/master/hosts</p>
<p><strong>The list:</strong></p>
<p>https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/gambling-porn/hosts</p>
<p>https://github.com/StevenBlack/hosts</p>]]></projectContent>
        <projectTitle><![CDATA[Best AdBlock use your Host file]]></projectTitle>
        <image><![CDATA[1186]]></image>
      </projectsItem>
    </projectsMain>
    <messageBoard id="1120" key="d8416cdd-6b40-43b0-8ebe-1432fabcce18" parentID="1088" level="2" creatorID="0" sortOrder="3" createDate="2016-10-12T14:51:37" updateDate="2016-11-09T12:42:12" nodeName="Message Board" urlName="message-board" path="-1,1088,1120" isDoc="" nodeType="1119" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1118" nodeTypeAlias="messageBoard" />
    <members id="1117" key="d65cac58-8c90-45f5-a8fb-594c0300dd1d" parentID="1088" level="2" creatorID="0" sortOrder="4" createDate="2016-10-03T17:06:13" updateDate="2016-11-09T12:42:12" nodeName="Members" urlName="members" path="-1,1088,1117" isDoc="" nodeType="1116" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1115" nodeTypeAlias="members">
      <metaDescription><![CDATA[Memebers]]></metaDescription>
      <metaKeywords><![CDATA[member]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
    </members>
    <textPage id="1154" key="b7e41e8a-4b23-4969-8411-f349c17315b7" parentID="1088" level="2" creatorID="0" sortOrder="5" createDate="2016-10-13T11:35:11" updateDate="2016-11-11T17:46:32" nodeName="About" urlName="about" path="-1,1088,1154" isDoc="" nodeType="1059" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1058" nodeTypeAlias="textPage">
      <umbracoNaviHide>0</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": [
        {
          "name": "Headline",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "headline"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "Aarhus Web Developers Network",
                  "editor": {
                    "alias": "headline"
                  },
                  "active": true
                }
              ],
              "hasActiveChild": true,
              "active": true
            }
          ],
          "hasConfig": false,
          "id": "a318bb97-9b4a-2b6f-15f7-173adcb64097",
          "hasActiveChild": true,
          "active": true
        },
        {
          "name": "Main Content",
          "areas": [
            {
              "grid": 12,
              "allowAll": false,
              "allowed": [
                "rte"
              ],
              "hasConfig": false,
              "controls": [
                {
                  "value": "",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "d4837dfa-a425-7ba8-b6fa-77a5518fea5d"
        },
        {
          "name": "Additional",
          "areas": [
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>Vision</h3>\n<p>My vision ...</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 4,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>People</h3>\n<p>Currently we employ some of the best educated people in the world..</p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            },
            {
              "grid": 4,
              "allowAll": true,
              "hasConfig": false,
              "controls": [
                {
                  "value": "<h3>Skills</h3>\n<p><span style=\"font-weight: 400;\">Skills</span></p>",
                  "editor": {
                    "alias": "rte"
                  },
                  "active": false
                }
              ]
            }
          ],
          "hasConfig": false,
          "id": "3166e797-5629-f0af-7726-dc8b7a890fd9"
        },
        {
          "name": "Additional",
          "areas": [
            {
              "grid": 4,
              "hasConfig": false,
              "controls": []
            },
            {
              "grid": 4,
              "hasConfig": false,
              "controls": []
            },
            {
              "grid": 4,
              "allowAll": true,
              "hasConfig": false,
              "controls": []
            }
          ],
          "hasConfig": false,
          "id": "a3047aa3-b002-b7ff-f1e7-f196bc2afba9"
        }
      ]
    }
  ]
}]]></grid>
    </textPage>
    <contactPage id="1101" key="350b4149-67e5-424e-815f-96f21cd58018" parentID="1088" level="2" creatorID="0" sortOrder="6" createDate="2016-09-20T10:11:36" updateDate="2016-11-09T12:42:12" nodeName="Contact Us" urlName="contact-us" path="-1,1088,1101" isDoc="" nodeType="1100" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1099" nodeTypeAlias="contactPage">
      <metaDescription><![CDATA[Contect]]></metaDescription>
      <metaKeywords><![CDATA[contact]]></metaKeywords>
      <umbracoNaviHide>0</umbracoNaviHide>
    </contactPage>
    <textPage id="1112" key="239e0c07-8435-4c5f-af36-a2bd840bc106" parentID="1088" level="2" creatorID="0" sortOrder="7" createDate="2016-09-26T11:27:17" updateDate="2016-11-11T09:16:07" nodeName="Login" urlName="login" path="-1,1088,1112" isDoc="" nodeType="1059" creatorName="Mike Jakobsen" writerName="Mike Jakobsen" writerID="0" template="1111" nodeTypeAlias="textPage">
      <metaDescription><![CDATA[Login]]></metaDescription>
      <metaKeywords><![CDATA[login]]></metaKeywords>
      <umbracoNaviHide>1</umbracoNaviHide>
      <grid><![CDATA[{
  "name": "1 column layout",
  "sections": [
    {
      "grid": 12,
      "rows": []
    }
  ]
}]]></grid>
    </textPage>
  </home>
</root>